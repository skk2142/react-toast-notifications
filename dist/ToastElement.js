'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultToast = exports.shrink = exports.toastWidth = exports.gutter = exports.borderRadius = undefined;

var _emotion = require('emotion');

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactEmotion = require('react-emotion');

var _reactEmotion2 = _interopRequireDefault(_reactEmotion);

var _icons = require('./icons');

var _colors = require('./colors');

var colors = _interopRequireWildcard(_colors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// common
var borderRadius = exports.borderRadius = 4;
var gutter = exports.gutter = 8;
var toastWidth = exports.toastWidth = 360;
var shrink = /*#__PURE__*/exports.shrink = (0, _reactEmotion.keyframes)('from{height:100%;}to{height:0%}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYStCIiwiZmlsZSI6Ii4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uLCBBbGVydEljb24gfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBjb21tb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSA0O1xuZXhwb3J0IGNvbnN0IGd1dHRlciA9IDg7XG5leHBvcnQgY29uc3QgdG9hc3RXaWR0aCA9IDM2MDtcbmV4cG9ydCBjb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbi8vIGExMXkgaGVscGVyXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuLy8gZGVmYXVsdCBhcHBlYXJhbmNlc1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuRzUwMCxcbiAgICBmZzogY29sb3JzLkczMDAsXG4gICAgYmc6IGNvbG9ycy5HNTAsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6IGNvbG9ycy5SNTAwLFxuICAgIGZnOiBjb2xvcnMuUjMwMCxcbiAgICBiZzogY29sb3JzLlI1MCxcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGljb246IEFsZXJ0SWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuWTUwMCxcbiAgICBmZzogY29sb3JzLlkzMDAsXG4gICAgYmc6IGNvbG9ycy5ZNTAsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuTjQwMCxcbiAgICBmZzogY29sb3JzLkIyMDAsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVR5cGVzID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmRpdih7XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBmbGV4U2hyaW5rOiAwLFxuICBvcGFjaXR5OiAwLjUsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDE1MG1zJyxcblxuICAnOmhvdmVyJzogeyBvcGFjaXR5OiAxIH0sXG59KTtcblxuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXYoe1xuICBmbGV4R3JvdzogMSxcbiAgZm9udFNpemU6IDE0LFxuICBsaW5lSGVpZ2h0OiAxLjQsXG4gIG1pbkhlaWdodDogNDAsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG59KTtcblxuLy8gTk9URTogaW52b2tlIGFuaW1hdGlvbiB3aGVuIE5PVCBgYXV0b0Rpc21pc3NgIHdpdGggb3BhY2l0eSBvZiAwIHRvIGF2b2lkIGFcbi8vIHBhaW50IGJ1ZyBpbiBGaXJlRm94LlxuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1Mjg5XG5jb25zdCBDb3VudGRvd24gPSBzdHlsZWQuZGl2KCh7IGF1dG9EaXNtaXNzVGltZW91dCwgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc1RpbWVvdXR9bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzLCBhdXRvRGlzbWlzc1RpbWVvdXQgfSkgPT4ge1xuICBjb25zdCBtZXRhID0gYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV07XG4gIGNvbnN0IEdseXBoID0gbWV0YS5pY29uO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0YS5mZyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGNvbG9yOiBtZXRhLmJnLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBndXR0ZXIsXG4gICAgICAgIHBhZGRpbmdUb3A6IGd1dHRlcixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Q291bnRkb3duXG4gICAgICAgIG9wYWNpdHk9e2F1dG9EaXNtaXNzID8gMSA6IDB9XG4gICAgICAgIGF1dG9EaXNtaXNzVGltZW91dD17YXV0b0Rpc21pc3NUaW1lb3V0fVxuICAgICAgLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIHtcbiAgY29uc3QgcG9zID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG4gIGNvbnN0IHJlbGV2YW50UGxhY2VtZW50ID0gcG9zWzFdID09PSAnY2VudGVyJyA/IHBvc1swXSA6IHBvc1sxXTtcbiAgY29uc3QgdHJhbnNsYXRlTWFwID0ge1xuICAgIHJpZ2h0OiAndHJhbnNsYXRlM2QoMTIwJSwgMCwgMCknLFxuICAgIGxlZnQ6ICd0cmFuc2xhdGUzZCgtMTIwJSwgMCwgMCknLFxuICAgIGJvdHRvbTogJ3RyYW5zbGF0ZTNkKDAsIDEyMCUsIDApJyxcbiAgICB0b3A6ICd0cmFuc2xhdGUzZCgwLCAtMTIwJSwgMCknLFxuICB9O1xuXG4gIHJldHVybiB0cmFuc2xhdGVNYXBbcmVsZXZhbnRQbGFjZW1lbnRdO1xufVxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvblN0YXRlID0gJ2VudGVyaW5nJyB8ICdlbnRlcmVkJyB8ICdleGl0aW5nJyB8ICdleGl0ZWQnO1xuY29uc3QgdG9hc3RTdGF0ZXMgPSAocGxhY2VtZW50OiBQbGFjZW1lbnQpID0+ICh7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxufSk7XG5jb25zdCBUb2FzdEVsZW1lbnQgPSBzdHlsZWQuZGl2KFxuICAoeyBhcHBlYXJhbmNlLCBwbGFjZW1lbnQsIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblN0YXRlIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdzogJzAgM3B4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTc1KScsXG4gICAgICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIG1hcmdpbkJvdHRvbTogZ3V0dGVyLFxuICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn1tcyBjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKWAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgICAgIC4uLnRvYXN0U3RhdGVzKHBsYWNlbWVudClbdHJhbnNpdGlvblN0YXRlXSxcbiAgICB9O1xuICB9XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERlZmF1bHRUb2FzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCB0eXBlIFRvYXN0UHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2VUeXBlcyxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4gfCBudW1iZXIsXG4gIGF1dG9EaXNtaXNzVGltZW91dDogbnVtYmVyLCAvLyBpbmhlcml0ZWQgZnJvbSBUb2FzdFByb3ZpZGVyXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICB0cmFuc2l0aW9uU3RhdGU6IFRyYW5zaXRpb25TdGF0ZSwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxufTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRUb2FzdCA9ICh7XG4gIGFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQsXG4gIGNoaWxkcmVuLFxuICBvbkRpc21pc3MsXG4gIHBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICB0cmFuc2l0aW9uU3RhdGUsXG59OiBUb2FzdFByb3BzKSA9PiAoXG4gIDxUb2FzdEVsZW1lbnRcbiAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgIHBsYWNlbWVudD17cGxhY2VtZW50fVxuICAgIHRyYW5zaXRpb25TdGF0ZT17dHJhbnNpdGlvblN0YXRlfVxuICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICA+XG4gICAgPEljb25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBhdXRvRGlzbWlzcz17YXV0b0Rpc21pc3N9XG4gICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAvPlxuICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAge29uRGlzbWlzcyA/IChcbiAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgPEExMXlUZXh0PkNsb3NlPC9BMTF5VGV4dD5cbiAgICAgIDwvQnV0dG9uPlxuICAgICkgOiBudWxsfVxuICA8L1RvYXN0RWxlbWVudD5cbik7XG4iXX0= */label:shrink;');

// a11y helper
var A11yText = function A11yText(_ref) {
  var Tag = _ref.tag,
      props = _objectWithoutProperties(_ref, ['tag']);

  return _react2.default.createElement(Tag, _extends({
    className: (0, _emotion.css)({
      border: 0,
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: 1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: 1
    }, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JJIiwiZmlsZSI6Ii4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uLCBBbGVydEljb24gfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBjb21tb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSA0O1xuZXhwb3J0IGNvbnN0IGd1dHRlciA9IDg7XG5leHBvcnQgY29uc3QgdG9hc3RXaWR0aCA9IDM2MDtcbmV4cG9ydCBjb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbi8vIGExMXkgaGVscGVyXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuLy8gZGVmYXVsdCBhcHBlYXJhbmNlc1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuRzUwMCxcbiAgICBmZzogY29sb3JzLkczMDAsXG4gICAgYmc6IGNvbG9ycy5HNTAsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6IGNvbG9ycy5SNTAwLFxuICAgIGZnOiBjb2xvcnMuUjMwMCxcbiAgICBiZzogY29sb3JzLlI1MCxcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGljb246IEFsZXJ0SWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuWTUwMCxcbiAgICBmZzogY29sb3JzLlkzMDAsXG4gICAgYmc6IGNvbG9ycy5ZNTAsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuTjQwMCxcbiAgICBmZzogY29sb3JzLkIyMDAsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVR5cGVzID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmRpdih7XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBmbGV4U2hyaW5rOiAwLFxuICBvcGFjaXR5OiAwLjUsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDE1MG1zJyxcblxuICAnOmhvdmVyJzogeyBvcGFjaXR5OiAxIH0sXG59KTtcblxuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXYoe1xuICBmbGV4R3JvdzogMSxcbiAgZm9udFNpemU6IDE0LFxuICBsaW5lSGVpZ2h0OiAxLjQsXG4gIG1pbkhlaWdodDogNDAsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG59KTtcblxuLy8gTk9URTogaW52b2tlIGFuaW1hdGlvbiB3aGVuIE5PVCBgYXV0b0Rpc21pc3NgIHdpdGggb3BhY2l0eSBvZiAwIHRvIGF2b2lkIGFcbi8vIHBhaW50IGJ1ZyBpbiBGaXJlRm94LlxuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1Mjg5XG5jb25zdCBDb3VudGRvd24gPSBzdHlsZWQuZGl2KCh7IGF1dG9EaXNtaXNzVGltZW91dCwgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc1RpbWVvdXR9bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzLCBhdXRvRGlzbWlzc1RpbWVvdXQgfSkgPT4ge1xuICBjb25zdCBtZXRhID0gYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV07XG4gIGNvbnN0IEdseXBoID0gbWV0YS5pY29uO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0YS5mZyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGNvbG9yOiBtZXRhLmJnLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBndXR0ZXIsXG4gICAgICAgIHBhZGRpbmdUb3A6IGd1dHRlcixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Q291bnRkb3duXG4gICAgICAgIG9wYWNpdHk9e2F1dG9EaXNtaXNzID8gMSA6IDB9XG4gICAgICAgIGF1dG9EaXNtaXNzVGltZW91dD17YXV0b0Rpc21pc3NUaW1lb3V0fVxuICAgICAgLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIHtcbiAgY29uc3QgcG9zID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG4gIGNvbnN0IHJlbGV2YW50UGxhY2VtZW50ID0gcG9zWzFdID09PSAnY2VudGVyJyA/IHBvc1swXSA6IHBvc1sxXTtcbiAgY29uc3QgdHJhbnNsYXRlTWFwID0ge1xuICAgIHJpZ2h0OiAndHJhbnNsYXRlM2QoMTIwJSwgMCwgMCknLFxuICAgIGxlZnQ6ICd0cmFuc2xhdGUzZCgtMTIwJSwgMCwgMCknLFxuICAgIGJvdHRvbTogJ3RyYW5zbGF0ZTNkKDAsIDEyMCUsIDApJyxcbiAgICB0b3A6ICd0cmFuc2xhdGUzZCgwLCAtMTIwJSwgMCknLFxuICB9O1xuXG4gIHJldHVybiB0cmFuc2xhdGVNYXBbcmVsZXZhbnRQbGFjZW1lbnRdO1xufVxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvblN0YXRlID0gJ2VudGVyaW5nJyB8ICdlbnRlcmVkJyB8ICdleGl0aW5nJyB8ICdleGl0ZWQnO1xuY29uc3QgdG9hc3RTdGF0ZXMgPSAocGxhY2VtZW50OiBQbGFjZW1lbnQpID0+ICh7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxufSk7XG5jb25zdCBUb2FzdEVsZW1lbnQgPSBzdHlsZWQuZGl2KFxuICAoeyBhcHBlYXJhbmNlLCBwbGFjZW1lbnQsIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblN0YXRlIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdzogJzAgM3B4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTc1KScsXG4gICAgICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIG1hcmdpbkJvdHRvbTogZ3V0dGVyLFxuICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn1tcyBjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKWAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgICAgIC4uLnRvYXN0U3RhdGVzKHBsYWNlbWVudClbdHJhbnNpdGlvblN0YXRlXSxcbiAgICB9O1xuICB9XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERlZmF1bHRUb2FzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCB0eXBlIFRvYXN0UHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2VUeXBlcyxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4gfCBudW1iZXIsXG4gIGF1dG9EaXNtaXNzVGltZW91dDogbnVtYmVyLCAvLyBpbmhlcml0ZWQgZnJvbSBUb2FzdFByb3ZpZGVyXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICB0cmFuc2l0aW9uU3RhdGU6IFRyYW5zaXRpb25TdGF0ZSwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxufTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRUb2FzdCA9ICh7XG4gIGFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQsXG4gIGNoaWxkcmVuLFxuICBvbkRpc21pc3MsXG4gIHBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICB0cmFuc2l0aW9uU3RhdGUsXG59OiBUb2FzdFByb3BzKSA9PiAoXG4gIDxUb2FzdEVsZW1lbnRcbiAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgIHBsYWNlbWVudD17cGxhY2VtZW50fVxuICAgIHRyYW5zaXRpb25TdGF0ZT17dHJhbnNpdGlvblN0YXRlfVxuICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICA+XG4gICAgPEljb25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBhdXRvRGlzbWlzcz17YXV0b0Rpc21pc3N9XG4gICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAvPlxuICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAge29uRGlzbWlzcyA/IChcbiAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgPEExMXlUZXh0PkNsb3NlPC9BMTF5VGV4dD5cbiAgICAgIDwvQnV0dG9uPlxuICAgICkgOiBudWxsfVxuICA8L1RvYXN0RWxlbWVudD5cbik7XG4iXX0= */')
  }, props));
};
A11yText.defaultProps = {
  tag: 'span'
};

// default appearances

var appearances = {
  success: {
    icon: _icons.CheckIcon,
    text: colors.G500,
    fg: colors.G300,
    bg: colors.G50
  },
  error: {
    icon: _icons.FlameIcon,
    text: colors.R500,
    fg: colors.R300,
    bg: colors.R50
  },
  warning: {
    icon: _icons.AlertIcon,
    text: colors.Y500,
    fg: colors.Y300,
    bg: colors.Y50
  },
  info: {
    icon: _icons.InfoIcon,
    text: colors.N400,
    fg: colors.B200,
    bg: 'white'
  }
};


var Button = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx0',
  label: 'Button'
})({
  cursor: 'pointer',
  flexShrink: 0,
  opacity: 0.5,
  padding: gutter + 'px ' + gutter * 1.5 + 'px',
  transition: 'opacity 150ms',

  ':hover': { opacity: 1 }
}, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUVlIiwiZmlsZSI6Ii4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uLCBBbGVydEljb24gfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBjb21tb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSA0O1xuZXhwb3J0IGNvbnN0IGd1dHRlciA9IDg7XG5leHBvcnQgY29uc3QgdG9hc3RXaWR0aCA9IDM2MDtcbmV4cG9ydCBjb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbi8vIGExMXkgaGVscGVyXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuLy8gZGVmYXVsdCBhcHBlYXJhbmNlc1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuRzUwMCxcbiAgICBmZzogY29sb3JzLkczMDAsXG4gICAgYmc6IGNvbG9ycy5HNTAsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6IGNvbG9ycy5SNTAwLFxuICAgIGZnOiBjb2xvcnMuUjMwMCxcbiAgICBiZzogY29sb3JzLlI1MCxcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGljb246IEFsZXJ0SWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuWTUwMCxcbiAgICBmZzogY29sb3JzLlkzMDAsXG4gICAgYmc6IGNvbG9ycy5ZNTAsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuTjQwMCxcbiAgICBmZzogY29sb3JzLkIyMDAsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVR5cGVzID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmRpdih7XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBmbGV4U2hyaW5rOiAwLFxuICBvcGFjaXR5OiAwLjUsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDE1MG1zJyxcblxuICAnOmhvdmVyJzogeyBvcGFjaXR5OiAxIH0sXG59KTtcblxuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXYoe1xuICBmbGV4R3JvdzogMSxcbiAgZm9udFNpemU6IDE0LFxuICBsaW5lSGVpZ2h0OiAxLjQsXG4gIG1pbkhlaWdodDogNDAsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG59KTtcblxuLy8gTk9URTogaW52b2tlIGFuaW1hdGlvbiB3aGVuIE5PVCBgYXV0b0Rpc21pc3NgIHdpdGggb3BhY2l0eSBvZiAwIHRvIGF2b2lkIGFcbi8vIHBhaW50IGJ1ZyBpbiBGaXJlRm94LlxuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1Mjg5XG5jb25zdCBDb3VudGRvd24gPSBzdHlsZWQuZGl2KCh7IGF1dG9EaXNtaXNzVGltZW91dCwgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc1RpbWVvdXR9bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzLCBhdXRvRGlzbWlzc1RpbWVvdXQgfSkgPT4ge1xuICBjb25zdCBtZXRhID0gYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV07XG4gIGNvbnN0IEdseXBoID0gbWV0YS5pY29uO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0YS5mZyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGNvbG9yOiBtZXRhLmJnLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBndXR0ZXIsXG4gICAgICAgIHBhZGRpbmdUb3A6IGd1dHRlcixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Q291bnRkb3duXG4gICAgICAgIG9wYWNpdHk9e2F1dG9EaXNtaXNzID8gMSA6IDB9XG4gICAgICAgIGF1dG9EaXNtaXNzVGltZW91dD17YXV0b0Rpc21pc3NUaW1lb3V0fVxuICAgICAgLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIHtcbiAgY29uc3QgcG9zID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG4gIGNvbnN0IHJlbGV2YW50UGxhY2VtZW50ID0gcG9zWzFdID09PSAnY2VudGVyJyA/IHBvc1swXSA6IHBvc1sxXTtcbiAgY29uc3QgdHJhbnNsYXRlTWFwID0ge1xuICAgIHJpZ2h0OiAndHJhbnNsYXRlM2QoMTIwJSwgMCwgMCknLFxuICAgIGxlZnQ6ICd0cmFuc2xhdGUzZCgtMTIwJSwgMCwgMCknLFxuICAgIGJvdHRvbTogJ3RyYW5zbGF0ZTNkKDAsIDEyMCUsIDApJyxcbiAgICB0b3A6ICd0cmFuc2xhdGUzZCgwLCAtMTIwJSwgMCknLFxuICB9O1xuXG4gIHJldHVybiB0cmFuc2xhdGVNYXBbcmVsZXZhbnRQbGFjZW1lbnRdO1xufVxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvblN0YXRlID0gJ2VudGVyaW5nJyB8ICdlbnRlcmVkJyB8ICdleGl0aW5nJyB8ICdleGl0ZWQnO1xuY29uc3QgdG9hc3RTdGF0ZXMgPSAocGxhY2VtZW50OiBQbGFjZW1lbnQpID0+ICh7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxufSk7XG5jb25zdCBUb2FzdEVsZW1lbnQgPSBzdHlsZWQuZGl2KFxuICAoeyBhcHBlYXJhbmNlLCBwbGFjZW1lbnQsIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblN0YXRlIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdzogJzAgM3B4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTc1KScsXG4gICAgICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIG1hcmdpbkJvdHRvbTogZ3V0dGVyLFxuICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn1tcyBjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKWAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgICAgIC4uLnRvYXN0U3RhdGVzKHBsYWNlbWVudClbdHJhbnNpdGlvblN0YXRlXSxcbiAgICB9O1xuICB9XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERlZmF1bHRUb2FzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCB0eXBlIFRvYXN0UHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2VUeXBlcyxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4gfCBudW1iZXIsXG4gIGF1dG9EaXNtaXNzVGltZW91dDogbnVtYmVyLCAvLyBpbmhlcml0ZWQgZnJvbSBUb2FzdFByb3ZpZGVyXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICB0cmFuc2l0aW9uU3RhdGU6IFRyYW5zaXRpb25TdGF0ZSwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxufTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRUb2FzdCA9ICh7XG4gIGFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQsXG4gIGNoaWxkcmVuLFxuICBvbkRpc21pc3MsXG4gIHBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICB0cmFuc2l0aW9uU3RhdGUsXG59OiBUb2FzdFByb3BzKSA9PiAoXG4gIDxUb2FzdEVsZW1lbnRcbiAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgIHBsYWNlbWVudD17cGxhY2VtZW50fVxuICAgIHRyYW5zaXRpb25TdGF0ZT17dHJhbnNpdGlvblN0YXRlfVxuICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICA+XG4gICAgPEljb25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBhdXRvRGlzbWlzcz17YXV0b0Rpc21pc3N9XG4gICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAvPlxuICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAge29uRGlzbWlzcyA/IChcbiAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgPEExMXlUZXh0PkNsb3NlPC9BMTF5VGV4dD5cbiAgICAgIDwvQnV0dG9uPlxuICAgICkgOiBudWxsfVxuICA8L1RvYXN0RWxlbWVudD5cbik7XG4iXX0= */');

var Content = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx1',
  label: 'Content'
})({
  flexGrow: 1,
  fontSize: 14,
  lineHeight: 1.4,
  minHeight: 40,
  padding: gutter + 'px ' + gutter * 1.5 + 'px'
}, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkVnQiIsImZpbGUiOiIuLi9zcmMvVG9hc3RFbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGtleWZyYW1lcyB9IGZyb20gJ3JlYWN0LWVtb3Rpb24nO1xuXG5pbXBvcnQgeyBDaGVja0ljb24sIEZsYW1lSWNvbiwgSW5mb0ljb24sIENsb3NlSWNvbiwgQWxlcnRJY29uIH0gZnJvbSAnLi9pY29ucyc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gY29tbW9uXG5leHBvcnQgY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmV4cG9ydCBjb25zdCBndXR0ZXIgPSA4O1xuZXhwb3J0IGNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5leHBvcnQgY29uc3Qgc2hyaW5rID0ga2V5ZnJhbWVzYGZyb20geyBoZWlnaHQ6IDEwMCU7IH0gdG8geyBoZWlnaHQ6IDAlIH1gO1xuXG4vLyBhMTF5IGhlbHBlclxuY29uc3QgQTExeVRleHQgPSAoeyB0YWc6IFRhZywgLi4ucHJvcHMgfSkgPT4gKFxuICA8VGFnXG4gICAgY3NzPXt7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjbGlwOiAncmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgd2lkdGg6IDEsXG4gICAgfX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pO1xuQTExeVRleHQuZGVmYXVsdFByb3BzID0ge1xuICB0YWc6ICdzcGFuJyxcbn07XG5cbi8vIGRlZmF1bHQgYXBwZWFyYW5jZXNcblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHN1Y2Nlc3M6IHtcbiAgICBpY29uOiBDaGVja0ljb24sXG4gICAgdGV4dDogY29sb3JzLkc1MDAsXG4gICAgZmc6IGNvbG9ycy5HMzAwLFxuICAgIGJnOiBjb2xvcnMuRzUwLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb246IEZsYW1lSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuUjUwMCxcbiAgICBmZzogY29sb3JzLlIzMDAsXG4gICAgYmc6IGNvbG9ycy5SNTAsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBpY29uOiBBbGVydEljb24sXG4gICAgdGV4dDogY29sb3JzLlk1MDAsXG4gICAgZmc6IGNvbG9ycy5ZMzAwLFxuICAgIGJnOiBjb2xvcnMuWTUwLFxuICB9LFxuICBpbmZvOiB7XG4gICAgaWNvbjogSW5mb0ljb24sXG4gICAgdGV4dDogY29sb3JzLk40MDAsXG4gICAgZmc6IGNvbG9ycy5CMjAwLFxuICAgIGJnOiAnd2hpdGUnLFxuICB9LFxufTtcbmV4cG9ydCB0eXBlIEFwcGVhcmFuY2VUeXBlcyA9ICRLZXlzPHR5cGVvZiBhcHBlYXJhbmNlcz47XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBhdXRvRGlzbWlzc1RpbWVvdXQsIG9wYWNpdHkgfSkgPT4gKHtcbiAgYW5pbWF0aW9uOiBgJHtzaHJpbmt9ICR7YXV0b0Rpc21pc3NUaW1lb3V0fW1zIGxpbmVhcmAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG4gIGJvdHRvbTogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbn0pKTtcbmNvbnN0IEljb24gPSAoeyBhcHBlYXJhbmNlLCBhdXRvRGlzbWlzcywgYXV0b0Rpc21pc3NUaW1lb3V0IH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93blxuICAgICAgICBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfVxuICAgICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAgIC8+XG4gICAgICA8R2x5cGggY3NzPXt7IHBvc2l0aW9uOiAncmVsYXRpdmUnLCB6SW5kZXg6IDEgfX0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB7XG4gIGNvbnN0IHBvcyA9IHBsYWNlbWVudC5zcGxpdCgnLScpO1xuICBjb25zdCByZWxldmFudFBsYWNlbWVudCA9IHBvc1sxXSA9PT0gJ2NlbnRlcicgPyBwb3NbMF0gOiBwb3NbMV07XG4gIGNvbnN0IHRyYW5zbGF0ZU1hcCA9IHtcbiAgICByaWdodDogJ3RyYW5zbGF0ZTNkKDEyMCUsIDAsIDApJyxcbiAgICBsZWZ0OiAndHJhbnNsYXRlM2QoLTEyMCUsIDAsIDApJyxcbiAgICBib3R0b206ICd0cmFuc2xhdGUzZCgwLCAxMjAlLCAwKScsXG4gICAgdG9wOiAndHJhbnNsYXRlM2QoMCwgLTEyMCUsIDApJyxcbiAgfTtcblxuICByZXR1cm4gdHJhbnNsYXRlTWFwW3JlbGV2YW50UGxhY2VtZW50XTtcbn1cbmV4cG9ydCB0eXBlIFRyYW5zaXRpb25TdGF0ZSA9ICdlbnRlcmluZycgfCAnZW50ZXJlZCcgfCAnZXhpdGluZycgfCAnZXhpdGVkJztcbmNvbnN0IHRvYXN0U3RhdGVzID0gKHBsYWNlbWVudDogUGxhY2VtZW50KSA9PiAoe1xuICBlbnRlcmluZzogeyB0cmFuc2Zvcm06IGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIH0sXG4gIGVudGVyZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJyB9LFxuICBleGl0aW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZXhpdGVkOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbn0pO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdihcbiAgKHsgYXBwZWFyYW5jZSwgcGxhY2VtZW50LCB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25TdGF0ZSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0uYmcsXG4gICAgICBib3JkZXJSYWRpdXMsXG4gICAgICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICAgICAgY29sb3I6IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdLnRleHQsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259bXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICAgICAgd2lkdGg6IHRvYXN0V2lkdGgsXG4gICAgICAuLi50b2FzdFN0YXRlcyhwbGFjZW1lbnQpW3RyYW5zaXRpb25TdGF0ZV0sXG4gICAgfTtcbiAgfVxuKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEZWZhdWx0VG9hc3Rcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgdHlwZSBUb2FzdFByb3BzID0ge1xuICBhcHBlYXJhbmNlOiBBcHBlYXJhbmNlVHlwZXMsXG4gIGF1dG9EaXNtaXNzOiBib29sZWFuIHwgbnVtYmVyLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQ6IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICBjaGlsZHJlbjogTm9kZSxcbiAgb25EaXNtaXNzOiBFdmVudCA9PiAqLFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXIsIC8vIGluaGVyaXRlZCBmcm9tIFRvYXN0UHJvdmlkZXJcbiAgdHJhbnNpdGlvblN0YXRlOiBUcmFuc2l0aW9uU3RhdGUsIC8vIGluaGVyaXRlZCBmcm9tIFRvYXN0UHJvdmlkZXJcbn07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0VG9hc3QgPSAoe1xuICBhcHBlYXJhbmNlLFxuICBhdXRvRGlzbWlzcyxcbiAgYXV0b0Rpc21pc3NUaW1lb3V0LFxuICBjaGlsZHJlbixcbiAgb25EaXNtaXNzLFxuICBwbGFjZW1lbnQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgdHJhbnNpdGlvblN0YXRlLFxufTogVG9hc3RQcm9wcykgPT4gKFxuICA8VG9hc3RFbGVtZW50XG4gICAgYXBwZWFyYW5jZT17YXBwZWFyYW5jZX1cbiAgICBwbGFjZW1lbnQ9e3BsYWNlbWVudH1cbiAgICB0cmFuc2l0aW9uU3RhdGU9e3RyYW5zaXRpb25TdGF0ZX1cbiAgICB0cmFuc2l0aW9uRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbn1cbiAgPlxuICAgIDxJY29uXG4gICAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgICAgYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfVxuICAgICAgYXV0b0Rpc21pc3NUaW1lb3V0PXthdXRvRGlzbWlzc1RpbWVvdXR9XG4gICAgLz5cbiAgICA8Q29udGVudD57Y2hpbGRyZW59PC9Db250ZW50PlxuICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uRGlzbWlzc30gcm9sZT1cImJ1dHRvblwiPlxuICAgICAgICA8Q2xvc2VJY29uIC8+XG4gICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICA8L0J1dHRvbj5cbiAgICApIDogbnVsbH1cbiAgPC9Ub2FzdEVsZW1lbnQ+XG4pO1xuIl19 */');

// NOTE: invoke animation when NOT `autoDismiss` with opacity of 0 to avoid a
// paint bug in FireFox.
// https://bugzilla.mozilla.org/show_bug.cgi?id=625289
var Countdown = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx2',
  label: 'Countdown'
})(function (_ref2) {
  var autoDismissTimeout = _ref2.autoDismissTimeout,
      opacity = _ref2.opacity;
  return {
    animation: shrink + ' ' + autoDismissTimeout + 'ms linear',
    backgroundColor: 'rgba(0,0,0,0.1)',
    bottom: 0,
    height: 0,
    left: 0,
    opacity: opacity,
    position: 'absolute',
    width: '100%'
  };
}, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0ZrQiIsImZpbGUiOiIuLi9zcmMvVG9hc3RFbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGtleWZyYW1lcyB9IGZyb20gJ3JlYWN0LWVtb3Rpb24nO1xuXG5pbXBvcnQgeyBDaGVja0ljb24sIEZsYW1lSWNvbiwgSW5mb0ljb24sIENsb3NlSWNvbiwgQWxlcnRJY29uIH0gZnJvbSAnLi9pY29ucyc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gY29tbW9uXG5leHBvcnQgY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmV4cG9ydCBjb25zdCBndXR0ZXIgPSA4O1xuZXhwb3J0IGNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5leHBvcnQgY29uc3Qgc2hyaW5rID0ga2V5ZnJhbWVzYGZyb20geyBoZWlnaHQ6IDEwMCU7IH0gdG8geyBoZWlnaHQ6IDAlIH1gO1xuXG4vLyBhMTF5IGhlbHBlclxuY29uc3QgQTExeVRleHQgPSAoeyB0YWc6IFRhZywgLi4ucHJvcHMgfSkgPT4gKFxuICA8VGFnXG4gICAgY3NzPXt7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjbGlwOiAncmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgd2lkdGg6IDEsXG4gICAgfX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pO1xuQTExeVRleHQuZGVmYXVsdFByb3BzID0ge1xuICB0YWc6ICdzcGFuJyxcbn07XG5cbi8vIGRlZmF1bHQgYXBwZWFyYW5jZXNcblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHN1Y2Nlc3M6IHtcbiAgICBpY29uOiBDaGVja0ljb24sXG4gICAgdGV4dDogY29sb3JzLkc1MDAsXG4gICAgZmc6IGNvbG9ycy5HMzAwLFxuICAgIGJnOiBjb2xvcnMuRzUwLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb246IEZsYW1lSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuUjUwMCxcbiAgICBmZzogY29sb3JzLlIzMDAsXG4gICAgYmc6IGNvbG9ycy5SNTAsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBpY29uOiBBbGVydEljb24sXG4gICAgdGV4dDogY29sb3JzLlk1MDAsXG4gICAgZmc6IGNvbG9ycy5ZMzAwLFxuICAgIGJnOiBjb2xvcnMuWTUwLFxuICB9LFxuICBpbmZvOiB7XG4gICAgaWNvbjogSW5mb0ljb24sXG4gICAgdGV4dDogY29sb3JzLk40MDAsXG4gICAgZmc6IGNvbG9ycy5CMjAwLFxuICAgIGJnOiAnd2hpdGUnLFxuICB9LFxufTtcbmV4cG9ydCB0eXBlIEFwcGVhcmFuY2VUeXBlcyA9ICRLZXlzPHR5cGVvZiBhcHBlYXJhbmNlcz47XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBhdXRvRGlzbWlzc1RpbWVvdXQsIG9wYWNpdHkgfSkgPT4gKHtcbiAgYW5pbWF0aW9uOiBgJHtzaHJpbmt9ICR7YXV0b0Rpc21pc3NUaW1lb3V0fW1zIGxpbmVhcmAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG4gIGJvdHRvbTogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbn0pKTtcbmNvbnN0IEljb24gPSAoeyBhcHBlYXJhbmNlLCBhdXRvRGlzbWlzcywgYXV0b0Rpc21pc3NUaW1lb3V0IH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93blxuICAgICAgICBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfVxuICAgICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAgIC8+XG4gICAgICA8R2x5cGggY3NzPXt7IHBvc2l0aW9uOiAncmVsYXRpdmUnLCB6SW5kZXg6IDEgfX0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB7XG4gIGNvbnN0IHBvcyA9IHBsYWNlbWVudC5zcGxpdCgnLScpO1xuICBjb25zdCByZWxldmFudFBsYWNlbWVudCA9IHBvc1sxXSA9PT0gJ2NlbnRlcicgPyBwb3NbMF0gOiBwb3NbMV07XG4gIGNvbnN0IHRyYW5zbGF0ZU1hcCA9IHtcbiAgICByaWdodDogJ3RyYW5zbGF0ZTNkKDEyMCUsIDAsIDApJyxcbiAgICBsZWZ0OiAndHJhbnNsYXRlM2QoLTEyMCUsIDAsIDApJyxcbiAgICBib3R0b206ICd0cmFuc2xhdGUzZCgwLCAxMjAlLCAwKScsXG4gICAgdG9wOiAndHJhbnNsYXRlM2QoMCwgLTEyMCUsIDApJyxcbiAgfTtcblxuICByZXR1cm4gdHJhbnNsYXRlTWFwW3JlbGV2YW50UGxhY2VtZW50XTtcbn1cbmV4cG9ydCB0eXBlIFRyYW5zaXRpb25TdGF0ZSA9ICdlbnRlcmluZycgfCAnZW50ZXJlZCcgfCAnZXhpdGluZycgfCAnZXhpdGVkJztcbmNvbnN0IHRvYXN0U3RhdGVzID0gKHBsYWNlbWVudDogUGxhY2VtZW50KSA9PiAoe1xuICBlbnRlcmluZzogeyB0cmFuc2Zvcm06IGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIH0sXG4gIGVudGVyZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJyB9LFxuICBleGl0aW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZXhpdGVkOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbn0pO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdihcbiAgKHsgYXBwZWFyYW5jZSwgcGxhY2VtZW50LCB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25TdGF0ZSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0uYmcsXG4gICAgICBib3JkZXJSYWRpdXMsXG4gICAgICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICAgICAgY29sb3I6IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdLnRleHQsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259bXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICAgICAgd2lkdGg6IHRvYXN0V2lkdGgsXG4gICAgICAuLi50b2FzdFN0YXRlcyhwbGFjZW1lbnQpW3RyYW5zaXRpb25TdGF0ZV0sXG4gICAgfTtcbiAgfVxuKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEZWZhdWx0VG9hc3Rcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgdHlwZSBUb2FzdFByb3BzID0ge1xuICBhcHBlYXJhbmNlOiBBcHBlYXJhbmNlVHlwZXMsXG4gIGF1dG9EaXNtaXNzOiBib29sZWFuIHwgbnVtYmVyLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQ6IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICBjaGlsZHJlbjogTm9kZSxcbiAgb25EaXNtaXNzOiBFdmVudCA9PiAqLFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXIsIC8vIGluaGVyaXRlZCBmcm9tIFRvYXN0UHJvdmlkZXJcbiAgdHJhbnNpdGlvblN0YXRlOiBUcmFuc2l0aW9uU3RhdGUsIC8vIGluaGVyaXRlZCBmcm9tIFRvYXN0UHJvdmlkZXJcbn07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0VG9hc3QgPSAoe1xuICBhcHBlYXJhbmNlLFxuICBhdXRvRGlzbWlzcyxcbiAgYXV0b0Rpc21pc3NUaW1lb3V0LFxuICBjaGlsZHJlbixcbiAgb25EaXNtaXNzLFxuICBwbGFjZW1lbnQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgdHJhbnNpdGlvblN0YXRlLFxufTogVG9hc3RQcm9wcykgPT4gKFxuICA8VG9hc3RFbGVtZW50XG4gICAgYXBwZWFyYW5jZT17YXBwZWFyYW5jZX1cbiAgICBwbGFjZW1lbnQ9e3BsYWNlbWVudH1cbiAgICB0cmFuc2l0aW9uU3RhdGU9e3RyYW5zaXRpb25TdGF0ZX1cbiAgICB0cmFuc2l0aW9uRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbn1cbiAgPlxuICAgIDxJY29uXG4gICAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgICAgYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfVxuICAgICAgYXV0b0Rpc21pc3NUaW1lb3V0PXthdXRvRGlzbWlzc1RpbWVvdXR9XG4gICAgLz5cbiAgICA8Q29udGVudD57Y2hpbGRyZW59PC9Db250ZW50PlxuICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uRGlzbWlzc30gcm9sZT1cImJ1dHRvblwiPlxuICAgICAgICA8Q2xvc2VJY29uIC8+XG4gICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICA8L0J1dHRvbj5cbiAgICApIDogbnVsbH1cbiAgPC9Ub2FzdEVsZW1lbnQ+XG4pO1xuIl19 */');
var Icon = function Icon(_ref3) {
  var appearance = _ref3.appearance,
      autoDismiss = _ref3.autoDismiss,
      autoDismissTimeout = _ref3.autoDismissTimeout;

  var meta = appearances[appearance];
  var Glyph = meta.icon;

  return _react2.default.createElement(
    'div',
    {
      className: (0, _emotion.css)({
        backgroundColor: meta.fg,
        borderTopLeftRadius: borderRadius,
        borderBottomLeftRadius: borderRadius,
        color: meta.bg,
        flexShrink: 0,
        paddingBottom: gutter,
        paddingTop: gutter,
        position: 'relative',
        overflow: 'hidden',
        textAlign: 'center',
        width: 30
      }, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0dNIiwiZmlsZSI6Ii4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uLCBBbGVydEljb24gfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBjb21tb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSA0O1xuZXhwb3J0IGNvbnN0IGd1dHRlciA9IDg7XG5leHBvcnQgY29uc3QgdG9hc3RXaWR0aCA9IDM2MDtcbmV4cG9ydCBjb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbi8vIGExMXkgaGVscGVyXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuLy8gZGVmYXVsdCBhcHBlYXJhbmNlc1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuRzUwMCxcbiAgICBmZzogY29sb3JzLkczMDAsXG4gICAgYmc6IGNvbG9ycy5HNTAsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6IGNvbG9ycy5SNTAwLFxuICAgIGZnOiBjb2xvcnMuUjMwMCxcbiAgICBiZzogY29sb3JzLlI1MCxcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGljb246IEFsZXJ0SWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuWTUwMCxcbiAgICBmZzogY29sb3JzLlkzMDAsXG4gICAgYmc6IGNvbG9ycy5ZNTAsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuTjQwMCxcbiAgICBmZzogY29sb3JzLkIyMDAsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVR5cGVzID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmRpdih7XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBmbGV4U2hyaW5rOiAwLFxuICBvcGFjaXR5OiAwLjUsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDE1MG1zJyxcblxuICAnOmhvdmVyJzogeyBvcGFjaXR5OiAxIH0sXG59KTtcblxuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXYoe1xuICBmbGV4R3JvdzogMSxcbiAgZm9udFNpemU6IDE0LFxuICBsaW5lSGVpZ2h0OiAxLjQsXG4gIG1pbkhlaWdodDogNDAsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG59KTtcblxuLy8gTk9URTogaW52b2tlIGFuaW1hdGlvbiB3aGVuIE5PVCBgYXV0b0Rpc21pc3NgIHdpdGggb3BhY2l0eSBvZiAwIHRvIGF2b2lkIGFcbi8vIHBhaW50IGJ1ZyBpbiBGaXJlRm94LlxuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1Mjg5XG5jb25zdCBDb3VudGRvd24gPSBzdHlsZWQuZGl2KCh7IGF1dG9EaXNtaXNzVGltZW91dCwgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc1RpbWVvdXR9bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzLCBhdXRvRGlzbWlzc1RpbWVvdXQgfSkgPT4ge1xuICBjb25zdCBtZXRhID0gYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV07XG4gIGNvbnN0IEdseXBoID0gbWV0YS5pY29uO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0YS5mZyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGNvbG9yOiBtZXRhLmJnLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBndXR0ZXIsXG4gICAgICAgIHBhZGRpbmdUb3A6IGd1dHRlcixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Q291bnRkb3duXG4gICAgICAgIG9wYWNpdHk9e2F1dG9EaXNtaXNzID8gMSA6IDB9XG4gICAgICAgIGF1dG9EaXNtaXNzVGltZW91dD17YXV0b0Rpc21pc3NUaW1lb3V0fVxuICAgICAgLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIHtcbiAgY29uc3QgcG9zID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG4gIGNvbnN0IHJlbGV2YW50UGxhY2VtZW50ID0gcG9zWzFdID09PSAnY2VudGVyJyA/IHBvc1swXSA6IHBvc1sxXTtcbiAgY29uc3QgdHJhbnNsYXRlTWFwID0ge1xuICAgIHJpZ2h0OiAndHJhbnNsYXRlM2QoMTIwJSwgMCwgMCknLFxuICAgIGxlZnQ6ICd0cmFuc2xhdGUzZCgtMTIwJSwgMCwgMCknLFxuICAgIGJvdHRvbTogJ3RyYW5zbGF0ZTNkKDAsIDEyMCUsIDApJyxcbiAgICB0b3A6ICd0cmFuc2xhdGUzZCgwLCAtMTIwJSwgMCknLFxuICB9O1xuXG4gIHJldHVybiB0cmFuc2xhdGVNYXBbcmVsZXZhbnRQbGFjZW1lbnRdO1xufVxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvblN0YXRlID0gJ2VudGVyaW5nJyB8ICdlbnRlcmVkJyB8ICdleGl0aW5nJyB8ICdleGl0ZWQnO1xuY29uc3QgdG9hc3RTdGF0ZXMgPSAocGxhY2VtZW50OiBQbGFjZW1lbnQpID0+ICh7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxufSk7XG5jb25zdCBUb2FzdEVsZW1lbnQgPSBzdHlsZWQuZGl2KFxuICAoeyBhcHBlYXJhbmNlLCBwbGFjZW1lbnQsIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblN0YXRlIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdzogJzAgM3B4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTc1KScsXG4gICAgICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIG1hcmdpbkJvdHRvbTogZ3V0dGVyLFxuICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn1tcyBjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKWAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgICAgIC4uLnRvYXN0U3RhdGVzKHBsYWNlbWVudClbdHJhbnNpdGlvblN0YXRlXSxcbiAgICB9O1xuICB9XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERlZmF1bHRUb2FzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCB0eXBlIFRvYXN0UHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2VUeXBlcyxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4gfCBudW1iZXIsXG4gIGF1dG9EaXNtaXNzVGltZW91dDogbnVtYmVyLCAvLyBpbmhlcml0ZWQgZnJvbSBUb2FzdFByb3ZpZGVyXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICB0cmFuc2l0aW9uU3RhdGU6IFRyYW5zaXRpb25TdGF0ZSwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxufTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRUb2FzdCA9ICh7XG4gIGFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQsXG4gIGNoaWxkcmVuLFxuICBvbkRpc21pc3MsXG4gIHBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICB0cmFuc2l0aW9uU3RhdGUsXG59OiBUb2FzdFByb3BzKSA9PiAoXG4gIDxUb2FzdEVsZW1lbnRcbiAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgIHBsYWNlbWVudD17cGxhY2VtZW50fVxuICAgIHRyYW5zaXRpb25TdGF0ZT17dHJhbnNpdGlvblN0YXRlfVxuICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICA+XG4gICAgPEljb25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBhdXRvRGlzbWlzcz17YXV0b0Rpc21pc3N9XG4gICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAvPlxuICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAge29uRGlzbWlzcyA/IChcbiAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgPEExMXlUZXh0PkNsb3NlPC9BMTF5VGV4dD5cbiAgICAgIDwvQnV0dG9uPlxuICAgICkgOiBudWxsfVxuICA8L1RvYXN0RWxlbWVudD5cbik7XG4iXX0= */')
    },
    _react2.default.createElement(Countdown, {
      opacity: autoDismiss ? 1 : 0,
      autoDismissTimeout: autoDismissTimeout
    }),
    _react2.default.createElement(Glyph, {
      className: (0, _emotion.css)({ position: 'relative', zIndex: 1 }, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0hhIiwiZmlsZSI6Ii4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uLCBBbGVydEljb24gfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBjb21tb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSA0O1xuZXhwb3J0IGNvbnN0IGd1dHRlciA9IDg7XG5leHBvcnQgY29uc3QgdG9hc3RXaWR0aCA9IDM2MDtcbmV4cG9ydCBjb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbi8vIGExMXkgaGVscGVyXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuLy8gZGVmYXVsdCBhcHBlYXJhbmNlc1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuRzUwMCxcbiAgICBmZzogY29sb3JzLkczMDAsXG4gICAgYmc6IGNvbG9ycy5HNTAsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6IGNvbG9ycy5SNTAwLFxuICAgIGZnOiBjb2xvcnMuUjMwMCxcbiAgICBiZzogY29sb3JzLlI1MCxcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGljb246IEFsZXJ0SWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuWTUwMCxcbiAgICBmZzogY29sb3JzLlkzMDAsXG4gICAgYmc6IGNvbG9ycy5ZNTAsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuTjQwMCxcbiAgICBmZzogY29sb3JzLkIyMDAsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVR5cGVzID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmRpdih7XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBmbGV4U2hyaW5rOiAwLFxuICBvcGFjaXR5OiAwLjUsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDE1MG1zJyxcblxuICAnOmhvdmVyJzogeyBvcGFjaXR5OiAxIH0sXG59KTtcblxuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXYoe1xuICBmbGV4R3JvdzogMSxcbiAgZm9udFNpemU6IDE0LFxuICBsaW5lSGVpZ2h0OiAxLjQsXG4gIG1pbkhlaWdodDogNDAsXG4gIHBhZGRpbmc6IGAke2d1dHRlcn1weCAke2d1dHRlciAqIDEuNX1weGAsXG59KTtcblxuLy8gTk9URTogaW52b2tlIGFuaW1hdGlvbiB3aGVuIE5PVCBgYXV0b0Rpc21pc3NgIHdpdGggb3BhY2l0eSBvZiAwIHRvIGF2b2lkIGFcbi8vIHBhaW50IGJ1ZyBpbiBGaXJlRm94LlxuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1Mjg5XG5jb25zdCBDb3VudGRvd24gPSBzdHlsZWQuZGl2KCh7IGF1dG9EaXNtaXNzVGltZW91dCwgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc1RpbWVvdXR9bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzLCBhdXRvRGlzbWlzc1RpbWVvdXQgfSkgPT4ge1xuICBjb25zdCBtZXRhID0gYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV07XG4gIGNvbnN0IEdseXBoID0gbWV0YS5pY29uO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbWV0YS5mZyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGNvbG9yOiBtZXRhLmJnLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBndXR0ZXIsXG4gICAgICAgIHBhZGRpbmdUb3A6IGd1dHRlcixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Q291bnRkb3duXG4gICAgICAgIG9wYWNpdHk9e2F1dG9EaXNtaXNzID8gMSA6IDB9XG4gICAgICAgIGF1dG9EaXNtaXNzVGltZW91dD17YXV0b0Rpc21pc3NUaW1lb3V0fVxuICAgICAgLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIHtcbiAgY29uc3QgcG9zID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG4gIGNvbnN0IHJlbGV2YW50UGxhY2VtZW50ID0gcG9zWzFdID09PSAnY2VudGVyJyA/IHBvc1swXSA6IHBvc1sxXTtcbiAgY29uc3QgdHJhbnNsYXRlTWFwID0ge1xuICAgIHJpZ2h0OiAndHJhbnNsYXRlM2QoMTIwJSwgMCwgMCknLFxuICAgIGxlZnQ6ICd0cmFuc2xhdGUzZCgtMTIwJSwgMCwgMCknLFxuICAgIGJvdHRvbTogJ3RyYW5zbGF0ZTNkKDAsIDEyMCUsIDApJyxcbiAgICB0b3A6ICd0cmFuc2xhdGUzZCgwLCAtMTIwJSwgMCknLFxuICB9O1xuXG4gIHJldHVybiB0cmFuc2xhdGVNYXBbcmVsZXZhbnRQbGFjZW1lbnRdO1xufVxuZXhwb3J0IHR5cGUgVHJhbnNpdGlvblN0YXRlID0gJ2VudGVyaW5nJyB8ICdlbnRlcmVkJyB8ICdleGl0aW5nJyB8ICdleGl0ZWQnO1xuY29uc3QgdG9hc3RTdGF0ZXMgPSAocGxhY2VtZW50OiBQbGFjZW1lbnQpID0+ICh7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB9LFxufSk7XG5jb25zdCBUb2FzdEVsZW1lbnQgPSBzdHlsZWQuZGl2KFxuICAoeyBhcHBlYXJhbmNlLCBwbGFjZW1lbnQsIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblN0YXRlIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdzogJzAgM3B4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTc1KScsXG4gICAgICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIG1hcmdpbkJvdHRvbTogZ3V0dGVyLFxuICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn1tcyBjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKWAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgICAgIC4uLnRvYXN0U3RhdGVzKHBsYWNlbWVudClbdHJhbnNpdGlvblN0YXRlXSxcbiAgICB9O1xuICB9XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERlZmF1bHRUb2FzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCB0eXBlIFRvYXN0UHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2VUeXBlcyxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4gfCBudW1iZXIsXG4gIGF1dG9EaXNtaXNzVGltZW91dDogbnVtYmVyLCAvLyBpbmhlcml0ZWQgZnJvbSBUb2FzdFByb3ZpZGVyXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG4gIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICB0cmFuc2l0aW9uU3RhdGU6IFRyYW5zaXRpb25TdGF0ZSwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxufTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRUb2FzdCA9ICh7XG4gIGFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQsXG4gIGNoaWxkcmVuLFxuICBvbkRpc21pc3MsXG4gIHBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICB0cmFuc2l0aW9uU3RhdGUsXG59OiBUb2FzdFByb3BzKSA9PiAoXG4gIDxUb2FzdEVsZW1lbnRcbiAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgIHBsYWNlbWVudD17cGxhY2VtZW50fVxuICAgIHRyYW5zaXRpb25TdGF0ZT17dHJhbnNpdGlvblN0YXRlfVxuICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICA+XG4gICAgPEljb25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBhdXRvRGlzbWlzcz17YXV0b0Rpc21pc3N9XG4gICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAvPlxuICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAge29uRGlzbWlzcyA/IChcbiAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgPEExMXlUZXh0PkNsb3NlPC9BMTF5VGV4dD5cbiAgICAgIDwvQnV0dG9uPlxuICAgICkgOiBudWxsfVxuICA8L1RvYXN0RWxlbWVudD5cbik7XG4iXX0= */')
    })
  );
};
function getTranslate(placement) {
  var pos = placement.split('-');
  var relevantPlacement = pos[1] === 'center' ? pos[0] : pos[1];
  var translateMap = {
    right: 'translate3d(120%, 0, 0)',
    left: 'translate3d(-120%, 0, 0)',
    bottom: 'translate3d(0, 120%, 0)',
    top: 'translate3d(0, -120%, 0)'
  };

  return translateMap[relevantPlacement];
}

var toastStates = function toastStates(placement) {
  return {
    entering: { transform: getTranslate(placement) },
    entered: { transform: 'translate3d(0,0,0)' },
    exiting: { transform: getTranslate(placement) },
    exited: { transform: getTranslate(placement) }
  };
};
var ToastElement = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1rce5zx3',
  label: 'ToastElement'
})(function (_ref4) {
  var appearance = _ref4.appearance,
      placement = _ref4.placement,
      transitionDuration = _ref4.transitionDuration,
      transitionState = _ref4.transitionState;

  return _extends({
    backgroundColor: appearances[appearance].bg,
    borderRadius: borderRadius,
    boxShadow: '0 3px 8px rgba(0, 0, 0, 0.175)',
    color: appearances[appearance].text,
    display: 'flex',
    marginBottom: gutter,
    transition: 'transform ' + transitionDuration + 'ms cubic-bezier(0.2, 0, 0, 1)',
    width: toastWidth
  }, toastStates(placement)[transitionState]);
}, '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2FzdEVsZW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0lxQiIsImZpbGUiOiIuLi9zcmMvVG9hc3RFbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGtleWZyYW1lcyB9IGZyb20gJ3JlYWN0LWVtb3Rpb24nO1xuXG5pbXBvcnQgeyBDaGVja0ljb24sIEZsYW1lSWNvbiwgSW5mb0ljb24sIENsb3NlSWNvbiwgQWxlcnRJY29uIH0gZnJvbSAnLi9pY29ucyc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gY29tbW9uXG5leHBvcnQgY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmV4cG9ydCBjb25zdCBndXR0ZXIgPSA4O1xuZXhwb3J0IGNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5leHBvcnQgY29uc3Qgc2hyaW5rID0ga2V5ZnJhbWVzYGZyb20geyBoZWlnaHQ6IDEwMCU7IH0gdG8geyBoZWlnaHQ6IDAlIH1gO1xuXG4vLyBhMTF5IGhlbHBlclxuY29uc3QgQTExeVRleHQgPSAoeyB0YWc6IFRhZywgLi4ucHJvcHMgfSkgPT4gKFxuICA8VGFnXG4gICAgY3NzPXt7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjbGlwOiAncmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgd2lkdGg6IDEsXG4gICAgfX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pO1xuQTExeVRleHQuZGVmYXVsdFByb3BzID0ge1xuICB0YWc6ICdzcGFuJyxcbn07XG5cbi8vIGRlZmF1bHQgYXBwZWFyYW5jZXNcblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHN1Y2Nlc3M6IHtcbiAgICBpY29uOiBDaGVja0ljb24sXG4gICAgdGV4dDogY29sb3JzLkc1MDAsXG4gICAgZmc6IGNvbG9ycy5HMzAwLFxuICAgIGJnOiBjb2xvcnMuRzUwLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb246IEZsYW1lSWNvbixcbiAgICB0ZXh0OiBjb2xvcnMuUjUwMCxcbiAgICBmZzogY29sb3JzLlIzMDAsXG4gICAgYmc6IGNvbG9ycy5SNTAsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBpY29uOiBBbGVydEljb24sXG4gICAgdGV4dDogY29sb3JzLlk1MDAsXG4gICAgZmc6IGNvbG9ycy5ZMzAwLFxuICAgIGJnOiBjb2xvcnMuWTUwLFxuICB9LFxuICBpbmZvOiB7XG4gICAgaWNvbjogSW5mb0ljb24sXG4gICAgdGV4dDogY29sb3JzLk40MDAsXG4gICAgZmc6IGNvbG9ycy5CMjAwLFxuICAgIGJnOiAnd2hpdGUnLFxuICB9LFxufTtcbmV4cG9ydCB0eXBlIEFwcGVhcmFuY2VUeXBlcyA9ICRLZXlzPHR5cGVvZiBhcHBlYXJhbmNlcz47XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBhdXRvRGlzbWlzc1RpbWVvdXQsIG9wYWNpdHkgfSkgPT4gKHtcbiAgYW5pbWF0aW9uOiBgJHtzaHJpbmt9ICR7YXV0b0Rpc21pc3NUaW1lb3V0fW1zIGxpbmVhcmAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG4gIGJvdHRvbTogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbn0pKTtcbmNvbnN0IEljb24gPSAoeyBhcHBlYXJhbmNlLCBhdXRvRGlzbWlzcywgYXV0b0Rpc21pc3NUaW1lb3V0IH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93blxuICAgICAgICBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfVxuICAgICAgICBhdXRvRGlzbWlzc1RpbWVvdXQ9e2F1dG9EaXNtaXNzVGltZW91dH1cbiAgICAgIC8+XG4gICAgICA8R2x5cGggY3NzPXt7IHBvc2l0aW9uOiAncmVsYXRpdmUnLCB6SW5kZXg6IDEgfX0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUocGxhY2VtZW50KSB7XG4gIGNvbnN0IHBvcyA9IHBsYWNlbWVudC5zcGxpdCgnLScpO1xuICBjb25zdCByZWxldmFudFBsYWNlbWVudCA9IHBvc1sxXSA9PT0gJ2NlbnRlcicgPyBwb3NbMF0gOiBwb3NbMV07XG4gIGNvbnN0IHRyYW5zbGF0ZU1hcCA9IHtcbiAgICByaWdodDogJ3RyYW5zbGF0ZTNkKDEyMCUsIDAsIDApJyxcbiAgICBsZWZ0OiAndHJhbnNsYXRlM2QoLTEyMCUsIDAsIDApJyxcbiAgICBib3R0b206ICd0cmFuc2xhdGUzZCgwLCAxMjAlLCAwKScsXG4gICAgdG9wOiAndHJhbnNsYXRlM2QoMCwgLTEyMCUsIDApJyxcbiAgfTtcblxuICByZXR1cm4gdHJhbnNsYXRlTWFwW3JlbGV2YW50UGxhY2VtZW50XTtcbn1cbmV4cG9ydCB0eXBlIFRyYW5zaXRpb25TdGF0ZSA9ICdlbnRlcmluZycgfCAnZW50ZXJlZCcgfCAnZXhpdGluZycgfCAnZXhpdGVkJztcbmNvbnN0IHRvYXN0U3RhdGVzID0gKHBsYWNlbWVudDogUGxhY2VtZW50KSA9PiAoe1xuICBlbnRlcmluZzogeyB0cmFuc2Zvcm06IGdldFRyYW5zbGF0ZShwbGFjZW1lbnQpIH0sXG4gIGVudGVyZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJyB9LFxuICBleGl0aW5nOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbiAgZXhpdGVkOiB7IHRyYW5zZm9ybTogZ2V0VHJhbnNsYXRlKHBsYWNlbWVudCkgfSxcbn0pO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdihcbiAgKHsgYXBwZWFyYW5jZSwgcGxhY2VtZW50LCB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25TdGF0ZSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0uYmcsXG4gICAgICBib3JkZXJSYWRpdXMsXG4gICAgICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICAgICAgY29sb3I6IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdLnRleHQsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259bXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICAgICAgd2lkdGg6IHRvYXN0V2lkdGgsXG4gICAgICAuLi50b2FzdFN0YXRlcyhwbGFjZW1lbnQpW3RyYW5zaXRpb25TdGF0ZV0sXG4gICAgfTtcbiAgfVxuKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEZWZhdWx0VG9hc3Rcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgdHlwZSBUb2FzdFByb3BzID0ge1xuICBhcHBlYXJhbmNlOiBBcHBlYXJhbmNlVHlwZXMsXG4gIGF1dG9EaXNtaXNzOiBib29sZWFuIHwgbnVtYmVyLFxuICBhdXRvRGlzbWlzc1RpbWVvdXQ6IG51bWJlciwgLy8gaW5oZXJpdGVkIGZyb20gVG9hc3RQcm92aWRlclxuICBjaGlsZHJlbjogTm9kZSxcbiAgb25EaXNtaXNzOiBFdmVudCA9PiAqLFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXIsIC8vIGluaGVyaXRlZCBmcm9tIFRvYXN0UHJvdmlkZXJcbiAgdHJhbnNpdGlvblN0YXRlOiBUcmFuc2l0aW9uU3RhdGUsIC8vIGluaGVyaXRlZCBmcm9tIFRvYXN0UHJvdmlkZXJcbn07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0VG9hc3QgPSAoe1xuICBhcHBlYXJhbmNlLFxuICBhdXRvRGlzbWlzcyxcbiAgYXV0b0Rpc21pc3NUaW1lb3V0LFxuICBjaGlsZHJlbixcbiAgb25EaXNtaXNzLFxuICBwbGFjZW1lbnQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgdHJhbnNpdGlvblN0YXRlLFxufTogVG9hc3RQcm9wcykgPT4gKFxuICA8VG9hc3RFbGVtZW50XG4gICAgYXBwZWFyYW5jZT17YXBwZWFyYW5jZX1cbiAgICBwbGFjZW1lbnQ9e3BsYWNlbWVudH1cbiAgICB0cmFuc2l0aW9uU3RhdGU9e3RyYW5zaXRpb25TdGF0ZX1cbiAgICB0cmFuc2l0aW9uRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbn1cbiAgPlxuICAgIDxJY29uXG4gICAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgICAgYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfVxuICAgICAgYXV0b0Rpc21pc3NUaW1lb3V0PXthdXRvRGlzbWlzc1RpbWVvdXR9XG4gICAgLz5cbiAgICA8Q29udGVudD57Y2hpbGRyZW59PC9Db250ZW50PlxuICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uRGlzbWlzc30gcm9sZT1cImJ1dHRvblwiPlxuICAgICAgICA8Q2xvc2VJY29uIC8+XG4gICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICA8L0J1dHRvbj5cbiAgICApIDogbnVsbH1cbiAgPC9Ub2FzdEVsZW1lbnQ+XG4pO1xuIl19 */');

// ==============================
// DefaultToast
// ==============================

var DefaultToast = exports.DefaultToast = function DefaultToast(_ref5) {
  var appearance = _ref5.appearance,
      autoDismiss = _ref5.autoDismiss,
      autoDismissTimeout = _ref5.autoDismissTimeout,
      children = _ref5.children,
      onDismiss = _ref5.onDismiss,
      placement = _ref5.placement,
      transitionDuration = _ref5.transitionDuration,
      transitionState = _ref5.transitionState;
  return _react2.default.createElement(
    ToastElement,
    {
      appearance: appearance,
      placement: placement,
      transitionState: transitionState,
      transitionDuration: transitionDuration
    },
    _react2.default.createElement(Icon, {
      appearance: appearance,
      autoDismiss: autoDismiss,
      autoDismissTimeout: autoDismissTimeout
    }),
    _react2.default.createElement(
      Content,
      null,
      children
    ),
    onDismiss ? _react2.default.createElement(
      Button,
      { onClick: onDismiss, role: 'button' },
      _react2.default.createElement(_icons.CloseIcon, null),
      _react2.default.createElement(
        A11yText,
        null,
        'Close'
      )
    ) : null
  );
};